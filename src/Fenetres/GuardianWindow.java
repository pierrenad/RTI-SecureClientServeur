/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Fenetres;

import CONTROLID.*;
import Message.MsgSigned;
import Message.SecretMsg;
import java.awt.event.KeyEvent;
import java.io.FileInputStream;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.security.KeyStore;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.SecureRandom;
import java.security.Signature;
import java.security.cert.CertificateException;
import java.security.cert.X509Certificate;
import java.util.Base64;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.Mac;
import javax.crypto.SecretKey;
import javax.swing.JOptionPane;
import network.Network;

/**
 *
 * @author Pierre
 */
public class GuardianWindow extends javax.swing.JFrame {

    private ObjectInputStream ois;
    private Socket cSock; 
    SecretKey SecretKey1, SecretKey2;
    
    /**
     * Creates new form GuardianWindow
     */
    public GuardianWindow() {
        initComponents();
        this.jLayeredPane1.setVisible(true);
        this.jLayeredPane2.setVisible(false);
        this.jLayeredPane3.setVisible(false);
    }
    public GuardianWindow(ObjectInputStream in, Socket s) {
        initComponents();
        ois = in;
        cSock = s; 
        this.jLayeredPane1.setVisible(true);
        this.jLayeredPane2.setVisible(false);
        this.jLayeredPane3.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        validerButton = new javax.swing.JButton();
        annulerButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        Num = new javax.swing.JTextField();
        jLayeredPane2 = new javax.swing.JLayeredPane();
        jLabel2 = new javax.swing.JLabel();
        numSecuSoc = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        numPermisTxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        nombrePassagers = new javax.swing.JComboBox<>();
        verifierButton = new javax.swing.JButton();
        AnnulerButton = new javax.swing.JButton();
        jLayeredPane3 = new javax.swing.JLayeredPane();
        jLabel6 = new javax.swing.JLabel();
        nbrPassagersRestant = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        numSecuPassager = new javax.swing.JTextField();
        verifButton = new javax.swing.JButton();
        quitterButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Verif Plaque Immatriculation");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        validerButton.setText("Valider");
        validerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                validerButtonActionPerformed(evt);
            }
        });

        annulerButton.setText("Annuler");
        annulerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                annulerButtonActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setText("Entrez le numéro d'immatriculation :");

        Num.setText("1-AAA-111");
        Num.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                NumKeyPressed(evt);
            }
        });

        jLayeredPane1.setLayer(validerButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(annulerButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(jLabel1, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane1.setLayer(Num, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(85, 85, 85)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGap(71, 71, 71)
                        .addComponent(validerButton)
                        .addGap(30, 30, 30)
                        .addComponent(annulerButton))
                    .addGroup(jLayeredPane1Layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(Num, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(85, Short.MAX_VALUE))
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane1Layout.createSequentialGroup()
                .addGap(68, 68, 68)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(Num, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(validerButton)
                    .addComponent(annulerButton))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        jLabel2.setText("Numéro sécurité sociale conducteur : ");

        numSecuSoc.setText("5555");
        numSecuSoc.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                numSecuSocKeyPressed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        jLabel3.setText("Vérifications");

        jLabel4.setText("Permis de conduire : ");

        numPermisTxt.setText("222");
        numPermisTxt.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                numPermisTxtKeyPressed(evt);
            }
        });

        jLabel5.setText("Nombre de passagers : ");

        nombrePassagers.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "0", "1", "2", "3", "4", "5", "6", "7" }));

        verifierButton.setText("Vérifier");
        verifierButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifierButtonActionPerformed(evt);
            }
        });

        AnnulerButton.setText("Annuler");
        AnnulerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnnulerButtonActionPerformed(evt);
            }
        });

        jLayeredPane2.setLayer(jLabel2, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(numSecuSoc, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jLabel3, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jLabel4, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(numPermisTxt, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(jLabel5, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(nombrePassagers, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(verifierButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane2.setLayer(AnnulerButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane2Layout = new javax.swing.GroupLayout(jLayeredPane2);
        jLayeredPane2.setLayout(jLayeredPane2Layout);
        jLayeredPane2Layout.setHorizontalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addContainerGap(150, Short.MAX_VALUE)
                .addComponent(jLabel3)
                .addGap(150, 150, 150))
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane2Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nombrePassagers, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numPermisTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(numSecuSoc, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jLayeredPane2Layout.createSequentialGroup()
                        .addGap(110, 110, 110)
                        .addComponent(verifierButton)
                        .addGap(59, 59, 59)
                        .addComponent(AnnulerButton)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jLayeredPane2Layout.setVerticalGroup(
            jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane2Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addComponent(jLabel3)
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(numSecuSoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(numPermisTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(nombrePassagers, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verifierButton)
                    .addComponent(AnnulerButton))
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jLabel6.setText("Passagers restants à vérifier : ");

        nbrPassagersRestant.setText("0");

        jLabel7.setText("Numéro de sécurité sociale du passager : ");

        numSecuPassager.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                numSecuPassagerKeyPressed(evt);
            }
        });

        verifButton.setText("Vérifier");
        verifButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verifButtonActionPerformed(evt);
            }
        });

        quitterButton.setText("Quitter");
        quitterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                quitterButtonActionPerformed(evt);
            }
        });

        jLayeredPane3.setLayer(jLabel6, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(nbrPassagersRestant, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(jLabel7, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(numSecuPassager, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(verifButton, javax.swing.JLayeredPane.DEFAULT_LAYER);
        jLayeredPane3.setLayer(quitterButton, javax.swing.JLayeredPane.DEFAULT_LAYER);

        javax.swing.GroupLayout jLayeredPane3Layout = new javax.swing.GroupLayout(jLayeredPane3);
        jLayeredPane3.setLayout(jLayeredPane3Layout);
        jLayeredPane3Layout.setHorizontalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jLayeredPane3Layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7)
                            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nbrPassagersRestant))
                            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addComponent(numSecuPassager, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jLayeredPane3Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addComponent(verifButton)
                        .addGap(46, 46, 46)
                        .addComponent(quitterButton)))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jLayeredPane3Layout.setVerticalGroup(
            jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jLayeredPane3Layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(nbrPassagersRestant))
                .addGap(37, 37, 37)
                .addComponent(jLabel7)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(numSecuPassager, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jLayeredPane3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(verifButton)
                    .addComponent(quitterButton))
                .addContainerGap(35, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLayeredPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLayeredPane1)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLayeredPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addComponent(jLayeredPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 0, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void validerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_validerButtonActionPerformed
        String Message = Num.getText(); 
        byte[] message = Message.getBytes();
        try {
            System.out.println("Recuperation de la cle privee");

            KeyStore ks = null;
            ks = KeyStore.getInstance("JKS");
            try {
                ks.load(new FileInputStream("C:\\Users\\Pierre\\Documents\\Ecole\\RTI\\Dossier4\\RTI4_SecureCliServ\\ks\\KeystoreCli.jks"), "rootroot".toCharArray()); 
            } catch (CertificateException ex) {
                Logger.getLogger(GuardianWindow.class.getName()).log(Level.SEVERE, null, ex);
            }

            PrivateKey cléPrivée;

            cléPrivée = (PrivateKey) ks.getKey("cle_cli", "rootroot".toCharArray());
            System.out.println(" *** Cle privee recuperee = " + cléPrivée.toString());
            System.out.println("Instanciation de la signature");
            Signature s = Signature.getInstance("SHA1withRSA");
            System.out.println("Initialisation de la signature");
            s.initSign(cléPrivée);

            System.out.println("Hachage du message");
            s.update(message);
            System.out.println("Generation des bytes");
            byte[] signature = s.sign();
            System.out.println("Termine : signature construite");
            System.out.println("Signature = " + new String(signature));
            System.out.println("Longueur de la signature = " + signature.length);
        
            MsgSigned msg = new MsgSigned(message, signature);
            
            RequeteControl req = new RequeteControl(RequeteControl.CHECK_NUM, msg); 

            Network n = new Network();
            n.SendRequest(cSock, req); // demande de vérifier le numéro d'immatriculation 

            ReponseControl rep = null;

            ois = new ObjectInputStream(cSock.getInputStream()); 
            rep = (ReponseControl)ois.readObject();
            System.out.println("<GuardianWindow-valider> *** Reponse reçue");
            
            ks = KeyStore.getInstance("JKS");
            ks.load(new FileInputStream("C:\\Users\\Pierre\\Documents\\Ecole\\RTI\\Dossier4\\RTI4_SecureCliServ\\ks\\KeystoreCli.jks"), "rootroot".toCharArray());

            X509Certificate certif = (X509Certificate)ks.getCertificate("cert_serv");

            PublicKey cléPublique;
            cléPublique = certif.getPublicKey();

            System.out.println("*** Cle publique recuperee = "+cléPublique.toString());
            System.out.println("Debut de verification de la signature construite");
            // signature 
            Signature si = Signature.getInstance("SHA1withRSA");
            si.initVerify(cléPublique);
            System.out.println("Hachage du message");
            si.update(String.valueOf(rep.getCode()).getBytes());
            System.out.println("Verification de la signature construite");
            
            StringTokenizer st = new StringTokenizer(rep.getCharge(), "#"); 
            String mess = st.nextToken(); 
            byte[] sign = Base64.getDecoder().decode(st.nextToken()); 
            boolean ok = si.verify(sign); 
            StringTokenizer str = new StringTokenizer(mess, "@"); 
            String mess1 = str.nextToken(); 
            String mess2 = str.nextToken(); 
            if(mess2.equals(" ")) {
                mess2 = "Aucun commentaire"; 
            }
            
            if(ok) { 
                if(rep.getCode() == ReponseControl.NUM_OK) {
                    if(mess1.equals("N")) {
                        if(mess2.equals("Aucun commentaire")) {
                            JOptionPane.showMessageDialog(null, "Plaque d'immatriculation trouvée dans nos registres !\nCommentaire : "+mess2, "Trouvé !", JOptionPane.INFORMATION_MESSAGE); 
                            this.jLayeredPane1.setVisible(false);
                            this.jLayeredPane2.setVisible(true);
                        } 
                        else {
                            JOptionPane.showMessageDialog(null, "Plaque d'immatriculation trouvée dans nos registres !\nCommentaire : "+mess2, "Trouvé !", JOptionPane.ERROR_MESSAGE); 
                        }
                    }
                    else if(mess1.equals("I")) {
                        if(mess2.equals("Aucun commentaire")) {
                            JOptionPane.showMessageDialog(null, "Plaque d'immatriculation trouvée dans le registre international !\nCommentaire : "+mess2, "Trouvé !", JOptionPane.INFORMATION_MESSAGE); 
                            this.jLayeredPane1.setVisible(false);
                            this.jLayeredPane2.setVisible(true);
                        }
                        else {
                            JOptionPane.showMessageDialog(null, "Plaque d'immatriculation trouvée dans nos registres !\nCommentaire : "+mess2, "Trouvé !", JOptionPane.ERROR_MESSAGE); 
                        }
                    }
                }
                else {
                    JOptionPane.showMessageDialog(null, "Cette plaque d'immatriculation n'existe dans aucun registre !", "Attention !", JOptionPane.ERROR_MESSAGE); 
                }
                
                // handshake 
                KeyGenerator cleGen = KeyGenerator.getInstance("DES");
                cleGen.init(new SecureRandom());
                SecretKey1 = cleGen.generateKey(); 
                cleGen.init(new SecureRandom());
                SecretKey2 = cleGen.generateKey(); 

                Cipher chiffrement = Cipher.getInstance("RSA/ECB/OAEPWithSHA1AndMGF1Padding", "BC");
                chiffrement.init(Cipher.ENCRYPT_MODE, cléPrivée);


                byte[] c1 = chiffrement.doFinal(SecretKey1.getEncoded());
                byte[] c2 = chiffrement.doFinal(SecretKey2.getEncoded());            

                SecretMsg sp1 = new SecretMsg(c1);
                SecretMsg sp2 = new SecretMsg(c2);

                RequeteControl req2 = new RequeteControl(RequeteControl.HANDSHAKE, sp1);
                n.SendRequest(cSock, req2);
                RequeteControl req3 = new RequeteControl(RequeteControl.HANDSHAKE, sp2);
                n.SendRequest(cSock, req3);
            }
        }
        catch (Exception e) { 
            System.err.println("<GuardianWindow-valider> " + e + " " + e.getMessage()); 
        }
    }//GEN-LAST:event_validerButtonActionPerformed

    private void annulerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_annulerButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_annulerButtonActionPerformed

    private void NumKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_NumKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
            validerButtonActionPerformed(null); 
    }//GEN-LAST:event_NumKeyPressed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        RequeteControl req = new RequeteControl(RequeteControl.CLOSE, ""); 
        
        Network n = new Network();
        n.SendRequest(cSock, req); // demande de vérifier le numéro d'immatriculation 
        
        ReponseControl rep = null;
        try {
            ois = new ObjectInputStream(cSock.getInputStream()); 
            rep = (ReponseControl)ois.readObject();
            System.out.println("<GuardianWindow-Closing> *** Reponse reçue");
        }
        catch (Exception e) { 
            System.err.println("<GuardianWindow-Closing> " + e.getMessage()); 
        }
    }//GEN-LAST:event_formWindowClosing

    private void verifierButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifierButtonActionPerformed
        if(!numPermisTxt.getText().equals("") && !numSecuSoc.getText().equals("")) {
            String numSecu = numSecuSoc.getText(); 
            String numPermis = numPermisTxt.getText(); 
            try {
                Mac hmac = Mac.getInstance("HmacMD5");
                hmac.init(SecretKey1);

                hmac.update(numPermis.getBytes());
                byte[] hamac = hmac.doFinal();

                MsgSigned msg = new MsgSigned(numPermis.getBytes(), hamac); // msgsigned recoit signature en 2eme param mais ici c'est un hmac (pareil vu que c'est des byte[])
                
                RequeteControl req = new RequeteControl(RequeteControl.VERIF_PERMIS, msg);
                Network n = new Network(); 
                n.SendRequest(cSock, req); 
                
                ReponseControl rep = null;
                ois = new ObjectInputStream(cSock.getInputStream()); 
                rep = (ReponseControl)ois.readObject();
                System.out.println("<GuardianWindow-verifier> *** Reponse reçue");
                
                Mac hmac2 = Mac.getInstance("HmacMD5");
                hmac2.init(SecretKey1);

                hmac2.update(String.valueOf(rep.getCode()).getBytes());
                byte[] hblocal = hmac2.doFinal();
                byte[] hf2 = Base64.getDecoder().decode(rep.getCharge()); 
                
                if(MessageDigest.isEqual(hf2, hblocal)) {
                    if(rep.getCode() == ReponseControl.PERMIS_OK) { // si c'est bon vérifier les num secu des passagers 
                        JOptionPane.showMessageDialog(this, "Permis ok !", "Super !", JOptionPane.INFORMATION_MESSAGE);
                        
                        // vérification des numSecu 
                        Mac hmac3 = Mac.getInstance("HmacMD5");
                        hmac3.init(SecretKey1);

                        hmac3.update(numSecu.getBytes());
                        byte[] hbsecu = hmac3.doFinal();

                        Cipher chiffrement = Cipher.getInstance("DES/ECB/PKCS5Padding", "BC");
                        chiffrement.init(Cipher.ENCRYPT_MODE, SecretKey2);

                        byte[] c1 = chiffrement.doFinal(numSecu.getBytes());

                        SecretMsg s = new SecretMsg(c1, hbsecu);
                        RequeteControl req2 = new RequeteControl(RequeteControl.CHECK_NUM_SECU, s);
                        n.SendRequest(cSock, req2);

                        ReponseControl rep2 = null;
                        ois = new ObjectInputStream(cSock.getInputStream()); 
                        rep2 = (ReponseControl)ois.readObject();
                        System.out.println("<GuardianWindow-verifier> *** Reponse reçue");

                        StringTokenizer st = new StringTokenizer(rep2.getCharge(), "#"); // hmac puis cipher 
                        byte[] hama = Base64.getDecoder().decode(st.nextToken()); 
                        byte[] cipher = Base64.getDecoder().decode(st.nextToken()); 

                        Cipher dechiffre;

                        dechiffre = Cipher.getInstance("DES/ECB/PKCS5Padding", "BC");
                        dechiffre.init(Cipher.DECRYPT_MODE, SecretKey2);

                        byte[] b = dechiffre.doFinal(cipher);

                        int type = Integer.parseInt(new String(b));
                        System.out.println("type : " + type); 

                        Mac hmacRepSecu = Mac.getInstance("HmacMD5");
                        hmacRepSecu.init(SecretKey1);

                        hmacRepSecu.update(String.valueOf(rep.getCode()).getBytes());
                        byte[] hbRepSecuLocal = hmacRepSecu.doFinal();

                        if(!MessageDigest.isEqual(hama, hbRepSecuLocal)) { // pas bon --------------------
                            if(rep2.getCode() == ReponseControl.NUMSECU_OK) {
                                JOptionPane.showMessageDialog(this, "Numero de sécurité valide !", "Super !", JOptionPane.INFORMATION_MESSAGE);

                                if(Integer.parseInt(nombrePassagers.getSelectedItem().toString()) != 0) {                                      
                                    jLayeredPane2.setVisible(false);
                                    jLayeredPane3.setVisible(true);
                                    nbrPassagersRestant.setText((String) nombrePassagers.getSelectedItem());
                                }
                                else {
                                    jLayeredPane2.setVisible(false);
                                    jLayeredPane1.setVisible(true);
                                }
                            }    
                            else
                            {
                                JOptionPane.showMessageDialog(this, "Numero de sécurité invalide !", "Erreur !", JOptionPane.ERROR_MESSAGE);
                                jLayeredPane2.setVisible(false);
                                jLayeredPane1.setVisible(true);
                            }
                        }
                        else 
                            System.out.println("<GuardianWindow-verifier> mauvais hmac");
                    }
                    else {
                        JOptionPane.showMessageDialog(this, "Permis invalide !", "Erreur !", JOptionPane.ERROR_MESSAGE);
                    }
                }
                else
                    System.out.println("<GuardianWindow-verifier> probleme");
            }
            catch(Exception e) {
                //System.err.println("<GuardianWindow-verifier> " + e);
                Logger.getLogger(GuardianWindow.class.getName()).log(Level.SEVERE, null, e);
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Veuillez entrer un numéro de permis", "Erreur !", JOptionPane.ERROR_MESSAGE); 
        }
    }//GEN-LAST:event_verifierButtonActionPerformed

    private void AnnulerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnnulerButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_AnnulerButtonActionPerformed

    private void numSecuSocKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numSecuSocKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
            verifierButtonActionPerformed(null); 
    }//GEN-LAST:event_numSecuSocKeyPressed

    private void numPermisTxtKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numPermisTxtKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
            verifierButtonActionPerformed(null); 
    }//GEN-LAST:event_numPermisTxtKeyPressed

    private void quitterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_quitterButtonActionPerformed
        this.dispose();
    }//GEN-LAST:event_quitterButtonActionPerformed

    private void verifButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verifButtonActionPerformed
        try {
            String numSecu = numSecuPassager.getText(); 
            
            Mac hmac3 = Mac.getInstance("HmacMD5");
            hmac3.init(SecretKey1);
            
            hmac3.update(numSecu.getBytes());
            byte[] hbsecu = hmac3.doFinal();
            
            Cipher chiffrement = Cipher.getInstance("DES/ECB/PKCS5Padding", "BC");
            chiffrement.init(Cipher.ENCRYPT_MODE, SecretKey2);
            
            byte[] c1 = chiffrement.doFinal(numSecu.getBytes());
            
            SecretMsg s = new SecretMsg(c1, hbsecu);
            RequeteControl req = new RequeteControl(RequeteControl.CHECK_NUM_SECU, s);
            Network n = new Network(); 
            n.SendRequest(cSock, req); 
            
            ReponseControl rep = null;
            ois = new ObjectInputStream(cSock.getInputStream()); 
            rep = (ReponseControl)ois.readObject();
            System.out.println("<GuardianWindow-verif> *** Reponse reçue");
            
            StringTokenizer st = new StringTokenizer(rep.getCharge(), "#"); // hmac puis cipher 
            byte[] hama = Base64.getDecoder().decode(st.nextToken()); 
            byte[] cipher = Base64.getDecoder().decode(st.nextToken()); 
            
            Cipher dechiffre;
            
            dechiffre = Cipher.getInstance("DES/ECB/PKCS5Padding", "BC");
            dechiffre.init(Cipher.DECRYPT_MODE, SecretKey2);
            
            byte[] b = dechiffre.doFinal(cipher);
            int type = Integer.parseInt(new String(b));
            
            Mac hmacRepSecu = Mac.getInstance("HmacMD5");
            hmacRepSecu.init(SecretKey1);
            
            hmacRepSecu.update(numSecu.getBytes());
            byte[] hbRepSecuLocal = hmacRepSecu.doFinal();
            byte[] hbRepSecu = hama;
                        
            if(type == ReponseControl.NUMSECU_OK) {
                JOptionPane.showMessageDialog(this, "Numero sécu valide", "Super !", JOptionPane.INFORMATION_MESSAGE);
                numSecuPassager.setText("");
                
                int nbpass = Integer.parseInt(nbrPassagersRestant.getText())-1;
                
                if(nbpass == 0) {
                    jLayeredPane3.setVisible(false);
                    jLayeredPane1.setVisible(true);
                }
                else {
                    nbrPassagersRestant.setText(String.valueOf(nbpass));
                }
            }
            else {
                JOptionPane.showMessageDialog(this, "Numero sécu invalide !", "Erreur !", JOptionPane.ERROR_MESSAGE);
                numSecuPassager.setText("");
                jLayeredPane3.setVisible(false);
                jLayeredPane1.setVisible(true);
            }
        } catch (Exception e) {
            Logger.getLogger(GuardianWindow.class.getName()).log(Level.SEVERE, null, e);
        }
    }//GEN-LAST:event_verifButtonActionPerformed

    private void numSecuPassagerKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_numSecuPassagerKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER)
            verifButtonActionPerformed(null); 
    }//GEN-LAST:event_numSecuPassagerKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuardianWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuardianWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuardianWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuardianWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GuardianWindow().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AnnulerButton;
    private javax.swing.JTextField Num;
    private javax.swing.JButton annulerButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JLayeredPane jLayeredPane2;
    private javax.swing.JLayeredPane jLayeredPane3;
    private javax.swing.JLabel nbrPassagersRestant;
    private javax.swing.JComboBox<String> nombrePassagers;
    private javax.swing.JTextField numPermisTxt;
    private javax.swing.JTextField numSecuPassager;
    private javax.swing.JTextField numSecuSoc;
    private javax.swing.JButton quitterButton;
    private javax.swing.JButton validerButton;
    private javax.swing.JButton verifButton;
    private javax.swing.JButton verifierButton;
    // End of variables declaration//GEN-END:variables
}
